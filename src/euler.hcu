/*---------------------------------------------------------------------------*\
 *
 *  minimmerflow
 *
 *  Copyright (C) 2015-2021 OPTIMAD engineering Srl
 *
 *  -------------------------------------------------------------------------
 *  License
 *  This file is part of minimmerflow.
 *
 *  minimmerflow is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License v3 (LGPL)
 *  as published by the Free Software Foundation.
 *
 *  minimmerflow is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 *  License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with minimmerflow. If not, see <http://www.gnu.org/licenses/>.
 *
\*---------------------------------------------------------------------------*/

#ifndef __MINIMMERFLOW_EULER_HCU__
#define __MINIMMERFLOW_EULER_HCU__

#include "constants.hcu"
#include "utils.cu"

#include "euler.hpp"

namespace euler {

__device__ void dev_atomicMax(const double value, const double* __restrict__ maxValue);

__device__ void dev_reduceMax(const double value, const size_t nElements, double* __restrict__ maxValue);

__device__ void dev_evalFluxes(const double* __restrict__ conservative, const double* __restrict__ n, double* __restrict__ fluxes, double* __restrict__ lambda);

__device__ void dev_evalSplitting(const double* __restrict__ conservativeL, const double* __restrict__ conservativeR, const double* __restrict__ n, double* __restrict__ fluxes, double* __restrict__ lambda);

__global__ void dev_uniformUpdateRHS(std::size_t nInterfaces, const std::size_t* __restrict__ interfaceRawIds,
                                     const double* __restrict__ interfaceNormals, const double* __restrict__ interfaceAreas,
                                     const std::size_t* __restrict__ leftCellRawIds, const std::size_t* __restrict__ rightCellRawIds,
                                     const double* __restrict__ leftReconstructions, const double* __restrict__ rightReconstructions,
                                     double* __restrict__ cellRHS, double* __restrict__ maxEig);

__global__ void dev_boundaryUpdateRHS(std::size_t nInterfaces, const std::size_t* __restrict__ interfaceRawIds,
                                      const double* __restrict__ interfaceNormals, const double* __restrict__ interfaceAreas,
                                      const std::size_t* __restrict__ fluidCellRawIds, const std::size_t* __restrict__ boundarySigns,
                                      const double* __restrict__ fluidReconstructions, const double* __restrict__ virtualReconstructions,
                                      double* __restrict__ cellRHS, double* __restrict__ maxEig);

}

#endif
