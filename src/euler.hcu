/*---------------------------------------------------------------------------*\
 *
 *  minimmerflow
 *
 *  Copyright (C) 2015-2021 OPTIMAD engineering Srl
 *
 *  -------------------------------------------------------------------------
 *  License
 *  This file is part of minimmerflow.
 *
 *  minimmerflow is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License v3 (LGPL)
 *  as published by the Free Software Foundation.
 *
 *  minimmerflow is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 *  License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with minimmerflow. If not, see <http://www.gnu.org/licenses/>.
 *
\*---------------------------------------------------------------------------*/

#ifndef __MINIMMERFLOW_EULER_HCU__
#define __MINIMMERFLOW_EULER_HCU__

#include "constants.hcu"
#include "utils.hcu"

#include "euler.hpp"

namespace euler {

__device__ void atomicMax(double * const address, const double value);

__device__ void dev_evalFluxes(const double *conservative, const double *primitive, const double *n, double *fluxes);

__device__ void dev_evalSplitting(const double *conservativeL, const double *conservativeR, const double *n, double *fluxes, double *lambda);

__global__ void dev_computeInterfaceFluxes(std::size_t nInterfaces, const std::size_t *interfaceRawIds, const int *interfaceSolvedFlag, const double *interfaceNormals,
                                           const double *ownerReconstructions, const double *neighReconstructions,
                                           double *interfacesFluxes, double *maxEig);

__host__ void cuda_computeInterfaceFluxes(const MeshGeometricalInfo &meshInfo, const ScalarPiercedStorage<int> &interfaceSolvedFlag,
                                          const ScalarPiercedStorage<double> &ownerReconstructions, const ScalarPiercedStorage<double> &neighReconstructions,
                                          ScalarPiercedStorage<double> *interfacesFluxes, double *maxEig);

}

#endif
